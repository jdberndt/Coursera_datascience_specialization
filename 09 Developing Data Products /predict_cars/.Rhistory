for( i in 1:1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
hist(rexp(1000, 0.2))
for( i in 1:1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
for( i in 1:1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
for( i in 1:10000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
for( i in 1:100000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
box()
?box
lambda <- 0.2
#theoretical mean of exp.dist
1/lamda
#plot hist of 1000 random exp of lambda 2
hist(rexp(1000, lambda))
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T)
hist(rexp(200, lambda, col = "baby blue"))
hist(rexp(200, lambda, col = "blue"))
hist(rexp(200, lambda), col = "blue")
hist(rexp(200, lambda), col = "baby blue")
hist(rexp(200, lambda), col = "cyan")
hist(mns, add = T, col = "magenta")
hist(rexp(500, lambda), col = "cyan")
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v=lambda)
abline(v=lambda, lwd =5)
abline(v=1/lambda, lwd =5)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lamda
#plot hist of 200 random exp of lambda 2
hist(rexp(1000, lambda), col = "cyan")
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 5)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lamda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan")
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 5)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", bin.width = 2)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 5)
?hist
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 5)
?abline
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 25)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 22)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 22)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
lambda <- 0.2
#theoretical mean of exp.dist
e_mn <- 1/lambda
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20)
#create simulation means and plot
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
?abline
mean(mns)
sd(mns)^2
hist(rexp(1000, lambda), col = "cyan", breaks = 20, alpha = 0.7)
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta", alpha = 0.7)
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
?plot
text(main = "Simulation of exponential distribution and sample means", xlab="")
?text
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
x <- rnorm(1000)
y <- x^0.2
plot (x, y)
x <- abs(rnorm(1000))
y <- x^0.2
plot (x, y)
y <- x^1/0.2
plot (x, y)
y <- x^(1/0.2)
plot (x, y)
y <- 0.2^x
plot (x, y)
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means for lamba^x", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means for 0.2^x", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
x <- sample(0:35, 1000)
x <- sample(0:35, 1000, replace = T)
y <- 0.2^x
plot(x, y)
x <- sample(0:3500/1000, 1000, replace = T)
y <- 0.2^x
plot(x, y)
hist(y)
hist(y, breaks =20)
plot(x, y)
x <- sample(0.001:3500, 1000, replace = T)
y <- 0.2^x
plot(x, y)
rm(x, y)
#plot hist of 200 random exp of lambda 2
set.seed(1)
hist(rexp(1000, lambda), col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means for 0.2^x", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
?sd
1/0.2
round(1/0.2, 1)
rug(rexp(1000, lambda))
#plot hist of 200 random exp of lambda 2
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means for 0.2^x", xlab="")
rug(exps)
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
#plot hist of 200 random exp of lambda 2
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of exponential distribution and sample means for 0.2^x", xlab="")
rug(exps)
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
0.2^-1
sqrt(0.2)
?legend
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of RVs and sample means for exp. dist with lambda = 0.2", xlab="")
rug(exps)
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend(legend = c("RVs", "means"))
```
legend("upperright", legend = c("RVs", "means"), col = c("cyan", "magenta", pch =1, ))
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta", pch =1, ))
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"))
set.seed(1)
x <- sample(.001:3500, 1000)
x <- sample(.001:350, 1000)
x <- sample(.001:3500, 1000)
y <- 0.2*e^-0.2*x
y <- 0.2*exp(1)^-0.2*x
plot(x,y)
plot(y)
plot(x,y)
y <- 0.2^-x
plot(x,y)
y <- 0.2^x
plot(x,y)
x <- sample(1:3500/1000, 1000)
y <- 0.2^x
plot(x,y)
y <- 0.2*exp(1)^-0.2*x
plot(x,y)
plot(y)
y <- 0.2^x
plot(y)
plot(x,y)
hist(y)
y <- 0.2*exp(1)^-0.2*x
hist(y)
rm(x,y)
e(1)
exp(1)
x <- (seq(1:100))
y <- exp(1)^-x
plot(x, y)
y <- 1*exp(1)^-1*x
plot(x, y)
y <- 1*exp(1)^(-1*x)
plot(x, y)
y <- (1*exp(1))^(-1*x)
plot(x, y)
x <- (seq(.001:1))
y <- (1*exp(1))^(-1*x)
plot(x, y)
x <- (seq(.001:1.00))
x <- (seq(1:1000)/1000)
y <- (1*exp(1))^(-1*x)
plot(x, y)
x <- (seq(1:1000)/100)
y <- (1*exp(1))^(-1*x)
plot(x, y)
hist(y)
rm(x,y)
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of RVs and sample means for exp. dist with lambda = 0.2", xlab="")
rug(exps)
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta", pch =1, ))
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =1)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =5)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =3)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =4)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =6)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =7)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =8)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =9)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =22)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =22)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
#plot hist of 200 random exp of lambda = 0.2
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of RVs and sample means for an \n exponential distribution with lambda = 0.2", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
sqrt(40)
lambda <- 0.2
n <- 40
#theoretical mean of exp.dist
e_mn <- 1/lambda
#theoretical variable of exp.dis
e_var <- (e_mn/sqrt(n))^2
e_var
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(n, lambda)))
#sample mean = mean of means
sample_mn <- round(mean(mns), 3)
#variance of sample = square of sd
sample_var <- round(sd(mns)^2, 3)
set.seed(1)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="")
hist(mns, add = T, col = "magenta")
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
lines(mns, rnorm(1000,mean=e_mn, sd=e_var/sqrt(n)), pch=22, col="black", lwd=2, lty = 2)
y<-rnorm(1000, mean = e_mn, sd = sqrt(e_var))
lines(mns, y, pch=22, col="black", lwd=2, lty = 2)
min(mns)
max(mns)
y <- dnorm(x = mns, mean = e_mn, sd = sqrt(e_var))
?seq
y <- dnorm(c(1:1000), mean = e_mn, sd = sqrt(e_var))
y <- dnorm(c(3.11:7.49, mean = e_mn, sd = sqrt(e_var))
y <- dnorm(c(3.11:7.49), mean = e_mn, sd = sqrt(e_var))
lines(c(3.11:7.49), y, pch=22, col="black", lwd=2, lty = 2)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
#plot gaussian curve
x <- seq(min(mns), max(mns), length = 1000)
y <- dnorm(x, mean = e_mn, sd = sqrt(e_var))
lines(x, y, pch=22, col="black", lwd=2, lty = 2)
x <- mns[order(mns)]
y <- dnorm(x, mean = e_mn, sd = sqrt(e_var))
lines(x, y, pch=22, col="black", lwd=2, lty = 2)
lines(x, y, pch=22, col="black", lwd=2, lty = 2)
plot(x, y, pch=22, col="black", lwd=2, lty = 2)
lines(x, y, pch=22, col="black", lwd=2, lty = 2)
lines(x, y, pch=22, col="red", lwd=2, lty = 2)
lines(x, y, pch=1, col="red", lwd=2, lty = 2)
lines(x, y, pch=1, col="red", lwd=5, lty = 1)
lines(x, y, col="red", lwd=5, lty = 1)
plot(x, y, pch=22, col="black", lwd=2, lty = 2)
lines(x, y, col="red", lwd=5, lty = 1)
lines(density(mns), col=blue, lwd=5)
lines(density(mns), col="blue", lwd=5)
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
#plot density curve
lines(density(mns), col="black", lwd=3)
hist(exps, probability = T, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="")
hist(mns, probability = T, add = T, col = "magenta")
hist(mns, probability = T, add = T, col = "magenta")
---
title: "Statistical_Inference_Course_Project_Part_1"
author: Jason B.
output:
html_document: default
pdf_document: default
---
## Overview
#### The purpose of this exercise is to demostrate that the distribution of means of sets drawn from an exponential distribution is approximately normal with a mean of means that estimates the population mean.
```{r}
lambda <- 0.2
n <- 40
set.seed(20180720)
#calculate theoretical mean
e_mn <- 1/lambda
#calculate theoretical variance
e_var <- (e_mn/sqrt(n))^2
```
## Simulations
#### This code creates a loop that calculates the mean of a set of 40 random variables drawn from an exponential distribution with lambda = 0.2. For each iteration it appends the new mean to the vector "mns".
```{r}
#create simulation means
mns = NULL
for(i in 1:1000) mns = c(mns, mean(rexp(n, lambda)))
#calculate sample mean = mean of means
sample_mn <- round(mean(mns), 3)
#calculate variance of sample = square of sd
sample_var <- round(sd(mns)^2, 3)
```
####The sample mean is `r sample_mn`, which is very close to the theoretical mean `r e_mn`.
####The sample variance is `r sample_var`, which is similar to the theoretical variance `r e_var`.
####  ...
##Distribution
####This next bit of code samples 1,000 random variables from a exponential distribution with lambda = 0.2 and plots them as a histogram showing the typical decreasing exponential curved shape. I compare this to the histogram of the sample means and the theoretical mean of the distribution.
```{r}
#plot hist of 1000 random variable of exp with lambda = 0.2
exps <- rexp(1000, lambda)
hist(exps, col = "cyan", breaks = 20, main = "Simulation of random variables and sample means \n for an exponential distribution with lambda = 0.2", xlab="X")
#plot means of 1000 simulations
hist(mns, add = T, col = "magenta")
#plot population mean
abline(v = e_mn, lwd = 3, lty =2)
legend("topright", legend = c("RVs", "means"), col = c("cyan", "magenta"), pch =15)
```
#### **Figure 1.** Histogram showing the simulation of 1,000 random variables (cyan) and 1,000 means (magenta) of simulated samples with n = 40 from a exponential distribution with lambda = 0.2. Note that the distribution of sample means is symmetric around the theoretical population mean (dashed line) and is approximately Gaussian.
x<-c(1:1000)
y<- 1-exp(1)^-0.2*x
plot(x, y)
library(swirl)
swirl
swirl()
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeat(fit))
head(dfbeta(fit))
resno <- out2[1,"y"]-predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- deviance(fit)/df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
resid(fitno)/sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
fit <- lm(mpg~cyc+wt, mtcars)
mtcars
fit <- lm(mpg~cyl+wt, mtcars)
fit$coefficients
fit
summary(fit)$coef
fit <- lm(mpg~factor(cyl)+wt, mtcars)
summary(fit)$coef
33.99-6.07
fitnowt <- lm(mpg~factor(cyl), mtcars)
summary(fitnowt)$coef
fitint <- lm(mpg~factor(cyl)+factor(cyl*wt), mtcars)
summary(fitint)$coef
fitint <- lm(mpg~factor(cyl)+(factor(cyl)*wt), mtcars)
summary(fitint)$coef
anova(fit, fitint)
fit3 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
fit4 <- lm(y~x)
hatvalues(fit4)
?dfbeta
dfbeta(fit4)
fit4
plot(x,y)
dfbetas(fit4)
fit3
summary(fit3)$coef
sessionInfo()
shiny::runApp('datasciencecoursera/predict_cars')
sessionInfo()
runApp('datasciencecoursera/predict_cars')
runApp('datasciencecoursera/predict_cars')
View(mtcars)
runApp('datasciencecoursera/predict_cars')
library(plotly)
runApp('datasciencecoursera/predict_cars')
shiny::runApp('datasciencecoursera/predict_cars')
runApp('datasciencecoursera/predict_cars')
